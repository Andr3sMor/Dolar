name: CI/CD Pipeline
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  # -----------------------------
  # 1. Tests con requirements.txt
  # -----------------------------
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
      - name: Install dependencies
        run: |
          python3 -m venv env-test
          source env-test/bin/activate
          pip install -r requirements.txt
          pytest test_dolar_handler.py -v
          pytest test_app.py -v

  # -----------------------------
  # 2. Deploy de Lambda con Zappa
  # -----------------------------
  deploy-lambda:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Replace env vars in zappa_settings.json
        run: |
          sed -i "s|\${DB_HOST}|${{ secrets.DB_HOST }}|g" zappa_settings.json
          sed -i "s|\${DB_USER}|${{ secrets.DB_USER }}|g" zappa_settings.json
          sed -i "s|\${DB_PASS}|${{ secrets.DB_PASS }}|g" zappa_settings.json
          sed -i "s|\${DB_NAME}|${{ secrets.DB_NAME }}|g" zappa_settings.json
      - name: Install lambda dependencies
        run: |
          python3 -m venv env-lambda
          source env-lambda/bin/activate
          pip install -r requirements.txt
          pip install zappa
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
      - name: Deploy with Zappa (dollar downloader)
        run: |
          source env-lambda/bin/activate
          if zappa status dev; then
            zappa update dev
          else
            zappa deploy dev
          fi
      - name: Deploy Zappa (s3_to_mysql)
        run: |
          source env-lambda/bin/activate
          if zappa status s3_to_mysql; then
            zappa update s3_to_mysql
          else
            zappa deploy s3_to_mysql
          fi

    # -----------------------------
  # 3. Deploy FastAPI a EC2
  # -----------------------------
  deploy-ec2:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Add SSH key
        run: |
          echo "${{ secrets.VOCKEY }}" > vockey.pem
          chmod 400 vockey.pem
      - name: Deploy FastAPI to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i vockey.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # -------------------------------
            # 1. Actualizar paquetes y herramientas
            # -------------------------------
            sudo apt update && sudo apt upgrade -y
            sudo apt install -y python3-pip python3-venv git
            # -------------------------------
            # 2. Configurar SSH para GitHub
            # -------------------------------
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            # -------------------------------
            # 3. Clonar o actualizar repositorio
            # -------------------------------
            REPO_DIR="Dolar"
            if [ -d "$REPO_DIR" ]; then
                cd "$REPO_DIR"
                git pull
            else
                git clone git@github.com:Andr3sMor/Dolar.git "$REPO_DIR"
                cd "$REPO_DIR"
            fi
            # -------------------------------
            # 4. Crear entorno virtual y activar
            # -------------------------------
            python3 -m venv venv
            source venv/bin/activate
            # -------------------------------
            # 5. Instalar dependencias
            # -------------------------------
            pip install --upgrade pip
            pip install -r requirements.txt
            pip install python-dotenv uvicorn
            # -------------------------------
            # 6. Crear archivo .env con secrets
            # -------------------------------
            echo "DB_HOST=${{ secrets.DB_HOST }}" > .env
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "DB_PORT=3306" >> .env
            # -------------------------------
            # 7. Detener servicio existente (si hay uno)
            # -------------------------------
            sudo systemctl stop fastapi-dolar 2>/dev/null || true
            # -------------------------------
            # 8. Configurar systemd
            # -------------------------------
            sudo tee /etc/systemd/system/fastapi-dolar.service > /dev/null <<EOL
            [Unit]
            Description=FastAPI Dolar Service
            After=network.target

            [Service]
            User=${{ secrets.EC2_USER }}
            WorkingDirectory=/home/${{ secrets.EC2_USER }}/Dolar
            EnvironmentFile=/home/${{ secrets.EC2_USER }}/Dolar/.env
            ExecStart=/home/${{ secrets.EC2_USER }}/Dolar/venv/bin/uvicorn main:app --host 0.0.0.0 --port 8000
            Restart=always
            RestartSec=5
            StandardOutput=append:/var/log/fastapi-dolar.log
            StandardError=append:/var/log/fastapi-dolar-error.log

            [Install]
            WantedBy=multi-user.target
            EOL
            # -------------------------------
            # 9. Recargar systemd y reiniciar servicio
            # -------------------------------
            sudo systemctl daemon-reload
            sudo systemctl start fastapi-dolar
            sudo systemctl enable fastapi-dolar
            # -------------------------------
            # 10. Verificar estado del servicio
            # -------------------------------
            sudo systemctl status fastapi-dolar --no-pager -l
          EOF
