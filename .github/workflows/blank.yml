name: CI/CD Pipeline
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  # -----------------------------
  # 1. Tests con requirements.txt
  # -----------------------------
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
      - name: Install dependencies
        run: |
          python3 -m venv env-test
          source env-test/bin/activate
          pip install -r requirements.txt
          pytest test_dolar_handler.py -v
          pytest test_app.py -v

  # -----------------------------
  # 2. Deploy de Lambda con Zappa
  # -----------------------------
  deploy-lambda:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Replace env vars in zappa_settings.json
        run: |
          sed -i "s|\${DB_HOST}|${{ secrets.DB_HOST }}|g" zappa_settings.json
          sed -i "s|\${DB_USER}|${{ secrets.DB_USER }}|g" zappa_settings.json
          sed -i "s|\${DB_PASS}|${{ secrets.DB_PASS }}|g" zappa_settings.json
          sed -i "s|\${DB_NAME}|${{ secrets.DB_NAME }}|g" zappa_settings.json
      - name: Install lambda dependencies
        run: |
          python3 -m venv env-lambda
          source env-lambda/bin/activate
          pip install -r requirements.txt
          pip install zappa
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
      - name: Deploy with Zappa (dollar downloader)
        run: |
          source env-lambda/bin/activate
          if zappa status dev; then
            zappa update dev
          else
            zappa deploy dev
          fi
      - name: Deploy Zappa (s3_to_mysql)
        run: |
          source env-lambda/bin/activate
          if zappa status s3_to_mysql; then
            zappa update s3_to_mysql
          else
            zappa deploy s3_to_mysql
          fi

    # -----------------------------
  # 3. Deploy FastAPI a EC2
  # -----------------------------
  deploy-ec2:
  runs-on: ubuntu-latest
  needs: deploy-lambda
  steps:
    - uses: actions/checkout@v4

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.VOCKEY }}
        script: |
          set -e  # detener si algo falla

          cd /home/ubuntu/parcial/Zappa_Dolar

          echo ">>> Actualizando repositorio"
          git fetch --all
          git reset --hard origin/main

          echo ">>> Creando/activando entorno virtual"
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          source venv/bin/activate

          echo ">>> Instalando dependencias"
          pip install --upgrade pip
          pip install -r requirements.txt

          echo ">>> Creando archivo .env"
          cat > .env <<EOF
          DB_HOST=${{ secrets.DB_HOST }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASS=${{ secrets.DB_PASS }}
          DB_NAME=${{ secrets.DB_NAME }}
          EOF

          echo ">>> Reiniciando servicio"
          sudo systemctl daemon-reload
          sudo systemctl restart fastapi-dolar
          sudo systemctl status fastapi-dolar --no-pager -l || true

