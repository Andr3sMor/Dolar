name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  # -----------------------------
  # 1. Tests con requirements-test.txt
  # -----------------------------
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install test dependencies
        run: |
          python3 -m venv env-test
          source env-test/bin/activate
          pip install -r requirements-test.txt
          pytest

  # -----------------------------
  # 2. Deploy de Lambda con Zappa
  # -----------------------------
  deploy-lambda:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install lambda dependencies
        run: |
          python3 -m venv env-lambda
          source env-lambda/bin/activate
          pip install -r requirements.txt

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Deploy with Zappa (dollar downloader)
        run: |
          source env/bin/activate
          if zappa status dev; then
            zappa update dev
          else
            zappa deploy dev
          fi

      - name: Replace env vars in zappa_settings.json
        run: |
          sed -i "s|\${DB_HOST}|${{ secrets.DB_HOST }}|g" zappa_settings.json
          sed -i "s|\${DB_USER}|${{ secrets.DB_USER }}|g" zappa_settings.json
          sed -i "s|\${DB_PASS}|${{ secrets.DB_PASS }}|g" zappa_settings.json
          sed -i "s|\${DB_NAME}|${{ secrets.DB_NAME }}|g" zappa_settings.json
      
  
      - name: Deploy Zappa (DB loader)
        run: |
          source env/bin/activate
          if zappa status db; then
            zappa update db
          else
            zappa deploy db
          fi

  # -----------------------------
  # 3. Deploy FastAPI en EC2
  # -----------------------------
  deploy-ec2:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/app
            git pull origin main
          
            if [ ! -d "venv" ]; then python3 -m venv venv; fi
            source venv/bin/activate
          
            pip install -r requirements-api.txt
          
            # Crear/actualizar archivo .env
            cat > /home/ubuntu/app/.env <<EOF
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASS=${{ secrets.DB_PASS }}
            DB_NAME=${{ secrets.DB_NAME }}
            EOF
          
            sudo systemctl restart api
