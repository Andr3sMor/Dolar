name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  # -----------------------------
  # 1. Tests con requirements.txt
  # -----------------------------
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Install dependencies
        run: |
          python3 -m venv env-test
          source env-test/bin/activate
          pip install -r requirements.txt
          # Ejecutar los tests con pytest
          pytest test_dolar_handler.py -v
          pytest test_app.py -v

  # -----------------------------
  # 2. Deploy de Lambda con Zappa
  # -----------------------------
  deploy-lambda:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Replace env vars in zappa_settings.json
        run: |
          sed -i "s|\${DB_HOST}|${{ secrets.DB_HOST }}|g" zappa_settings.json
          sed -i "s|\${DB_USER}|${{ secrets.DB_USER }}|g" zappa_settings.json
          sed -i "s|\${DB_PASS}|${{ secrets.DB_PASS }}|g" zappa_settings.json
          sed -i "s|\${DB_NAME}|${{ secrets.DB_NAME }}|g" zappa_settings.json

      - name: Install lambda dependencies
        run: |
          python3 -m venv env-lambda
          source env-lambda/bin/activate
          pip install -r requirements.txt
          pip install zappa

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Deploy with Zappa (dollar downloader)
        run: |
          source env-lambda/bin/activate
          if zappa status dev; then
            zappa update dev
          else
            zappa deploy dev
          fi

      - name: Deploy Zappa (s3_to_mysql)
        run: |
          source env-lambda/bin/activate
          if zappa status s3_to_mysql; then
            zappa update s3_to_mysql
          else
            zappa deploy s3_to_mysql
          fi

  # -----------------------------
  # 3. Deploy FastAPI a EC2
  # -----------------------------
  deploy-ec2:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Add SSH key
        run: |
          echo "${{ secrets.EC2_KEY }}" > key.pem
          chmod 600 github-aws-dollar.pem

      - name: Deploy FastAPI to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i github-aws-dollar.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Instalar dependencias
            sudo apt update
            sudo apt install -y python3-pip git

            # Crear archivo .env con los secrets de DB
            echo "DB_HOST=${{ secrets.DB_HOST }}" > .env
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "DB_PORT=3306" >> .env

            # Instalar dependencias de FastAPI
            pip3 install -r ../requirements.txt

            # Matar instancia previa de uvicorn (si hay)
            pkill -f "uvicorn app.main:app" || true

            # Lanzar el servidor FastAPI con Uvicorn en segundo plano
            nohup uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          EOF
